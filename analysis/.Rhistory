ggtitle(title)
)
}
measurement = filter(measurements, lambda == 20)
simulation = filter(simulations, lambda == 20)
df_sim_to_boxplot = data.frame(scenario = "sim", service_time = simulation$service_time)
df_mean_to_boxplot = data.frame(scenario = " mea", service_time = measurement$service_time)
df_imp_to_boxplot = data.frame(scenario = "imp", service_time = inputs$service_time)
boxplot_plot("Lambda 20", df_mean_to_boxplot, df_sim_to_boxplot, df_imp_to_boxplot, c(10, 50))
rm(df_sim_to_boxplot, df_mean_to_boxplot, df_imp_to_boxplot)
rm(measurement, simulation)
library(fitdistrplus)
measurement = filter(measurements, lambda == 20)
descdist(measurement$service_time, discrete = FALSE, boot=2000)
hist(measurement$service_time, freq = FALSE)
lines(density(measurement$service_time))
simulation = filter(simulations, lambda == 20)
descdist(simulation$service_time, discrete = FALSE, boot=2000)
hist(simulation$service_time, freq = FALSE)
lines(density(simulation$service_time))
descdist(inputs$service_time, discrete = FALSE, boot=2000)
hist(inputs$service_time, freq = FALSE)
lines(density(inputs$service_time))
rm(measurement, simulation)
require(dplyr)
require(ggplot2)
library(ggpubr)
require(quantileCI)
require(base64enc)
summary_table <- function(df1, tag1, df2, tag2) {
qCI <- function(df, p) {
return(quantileCI::quantile_confint_nyblom(df, p))
}
stats <- function(df) {
avg = signif(t.test(df)$conf.int, digits = 2)
p50 = signif(qCI(df, 0.5), digits = 4)
p95 = signif(qCI(df, 0.95), digits = 4)
p99 = signif(qCI(df, 0.99), digits = 4)
p999 = signif(qCI(df, 0.999), digits = 4)
# p9999 = signif(qCI(df, 0.9999), digits = 4)
# p99999 = signif(qCI(df, 0.99999), digits = 4)
# dist = signif(qCI(df, 0.99999)- qCI(df, 0.5), digits = 4)
data <- c(avg, p50, p95, p99, p999)#, p9999, p99999, dist)
return(data)
}
stats1 = stats(df1)
stats2 = stats(df2)
avgdf    <- data.frame("avg",    stats1[1],  stats1[2],  stats2[1],  stats2[2])
p50df    <- data.frame("p50",    stats1[3],  stats1[4],  stats2[3],  stats2[4])
p95df    <- data.frame("p95",    stats1[5],  stats1[6],  stats2[5],  stats2[6])
p99df    <- data.frame("p99",    stats1[7],  stats1[8],  stats2[7],  stats2[8])
p999df   <- data.frame("p999",   stats1[9],  stats1[10], stats2[9],  stats2[10])
# p9999df  <- data.frame("p9999",  stats1[11], stats1[12], stats2[11], stats2[12])
# p99999df <- data.frame("p99999", stats1[13], stats1[14], stats2[13], stats2[14])
# distdf   <- data.frame("dist",   stats1[15], stats1[16], stats2[15], stats2[16])
tag1_inf = paste(tag1, "cii", sep = ".")
tag1_sup = paste(tag1, "cis", sep = ".")
tag2_inf = paste(tag2, "cii", sep = ".")
tag2_sup = paste(tag2, "cis", sep = ".")
names(avgdf)    <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
names(p50df)    <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
names(p95df)    <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
names(p99df)    <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
names(p999df)   <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
# names(p9999df)  <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
# names(p99999df) <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
# names(distdf)   <- c("stats", tag1_inf, tag1_sup, tag2_inf, tag2_sup)
df <- rbind(avgdf, p50df, p95df, p99df, p999df)#, p9999df, p99999df, distdf)
df
}
measurement = filter(measurements, lambda == 20)
simulation = filter(simulations, lambda == 20)
summary_table(measurement$service_time, "measurement", simulation$service_time,"simulation")
summary_table(measurement$service_time, "measurement", inputs$service_time,"inputs")
summary_table(inputs$service_time, "inputs", simulation$service_time,"simulation")
summary_table(filter(measurements, tag == "measurement-lambda20-id1")$service_time, "id1",
filter(measurements, tag == "measurement-lambda20-id2")$service_time, "id2")
summary_table(filter(measurements, tag == "measurement-lambda20-id3")$service_time, "id3",
filter(measurements, tag == "measurement-lambda20-id4")$service_time, "id4")
rm(measurement, simulation)
measurement = filter(measurements, lambda == 20)
simulation = filter(simulations, lambda == 20)
summary_table(measurement$service_time, "measurement", simulation$service_time,"simulation")
summary_table(measurement$service_time, "measurement", inputs$service_time,"inputs")
summary_table(inputs$service_time, "inputs", simulation$service_time,"simulation")
summary_table(filter(measurements, tag == "measurement-lambda20-id1")$service_time, "id1",
filter(measurements, tag == "measurement-lambda20-id2")$service_time, "id2")
summary_table(filter(measurements, tag == "measurement-lambda20-id3")$service_time, "id3",
filter(measurements, tag == "measurement-lambda20-id4")$service_time, "id4")
rm(measurement, simulation)
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 100)
simulation = sample(filter(simulations, lambda == 20)$service_time, 100)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 100)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 100)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 1000)
simulation = sample(filter(simulations, lambda == 20)$service_time, 1000)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 1000)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 1000)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 500)
simulation = sample(filter(simulations, lambda == 20)$service_time, 500)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 500)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 500)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 500)
simulation = sample(filter(simulations, lambda == 20)$service_time, 500)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 500)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 500)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 500)
simulation = sample(filter(simulations, lambda == 20)$service_time, 500)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 500)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 500)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 500)
simulation = sample(filter(simulations, lambda == 20)$service_time, 500)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 500)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 500)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 500)
simulation = sample(filter(simulations, lambda == 20)$service_time, 500)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 500)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 500)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = sample(filter(measurements, lambda == 20)$service_time, 500)
simulation = sample(filter(simulations, lambda == 20)$service_time, 500)
ks.test(measurement, simulation)
kruskal.test(measurement, simulation) # http://www.sthda.com/english/wiki/kruskal-wallis-test-in-r and https://stat-methods.com/home/kruskal-wallis-r/
measurement_1 = sample(filter(measurements, tag == "measurement-lambda20-id1")$service_time, 500)
measurement_2 = sample(filter(measurements, tag == "measurement-lambda20-id4")$service_time, 500)
ks.test(measurement_1, measurement_2)
kruskal.test(measurement_1, measurement_2)
rm(measurement, simulation, measuremen_1, measuremen_2)
### BACKUP
# wilcox.test(measurement, simulation, alt="two.sided")
# require(BWStest)
# bws_test(measurement, simulation)
# t.test(measurement, simulation)
# plot(ecdf(filter(simulations, lambda == 20)$service_time))
# lines(ecdf(filter(measurements, lambda == 20)$service_time), col='red')
# about validation: https://www.scielo.br/scielo.php?script=sci_arttext&pid=S0101-74382011000100005
measurement = filter(measurements, lambda == 20)
simulation = filter(simulations, lambda == 20)
summary_table(measurement$service_time, "measurement", simulation$service_time,"simulation")
summary_table(measurement$service_time, "measurement", inputs$service_time,"inputs")
summary_table(inputs$service_time, "inputs", simulation$service_time,"simulation")
summary_table(filter(measurements, tag == "measurement-lambda20-id1")$service_time, "mid1",
filter(measurements, tag == "measurement-lambda20-id2")$service_time, "mid2")
summary_table(filter(measurements, tag == "measurement-lambda20-id3")$service_time, "mid3",
filter(measurements, tag == "measurement-lambda20-id4")$service_time, "mid4")
summary_table(filter(simulations, tag == "simulation-lambda20-id1")$service_time, "sid1",
filter(simulations, tag == "simulation-lambda20-id2")$service_time, "sid2")
summary_table(filter(simulations, tag == "simulation-lambda20-id3")$service_time, "sid3",
filter(simulations, tag == "simulation-lambda20-id4")$service_time, "sid4")
rm(measurement, simulation)
